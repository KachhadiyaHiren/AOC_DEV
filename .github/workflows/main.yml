name: Databricks Multi-Environment Deployment

on:
  push:
    paths-ignore:
      - .github/**
      - README.md
      - docs/**
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment to deploy'
        required: true
        type: choice
        options:
          - development
          - uat
          - production
          - all

jobs:
  # ----------------------
  # VALIDATION & TESTS
  # ----------------------
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Validate syntax
        run: |
          echo "‚úÖ Validating Python syntax..."
          # python -m py_compile $(find . -name "*.ipynb" -not -path "./venv/*")
      
      - name: Check for secrets in code
        run: |
          echo "üîç Checking for exposed secrets..."
          if grep -r "password\|secret\|token" --include="*.py" --include="*.sql" .; then
            echo "‚ö†Ô∏è Warning: Potential secrets found in code"
          fi
      
      - name: Deployment summary
        run: |
          echo "üìã Deployment Summary:"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Timestamp: $(date)"

  # ----------------------
  # DEPLOY TO DEV
  # ----------------------
  deploy-dev:
    needs: validate
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.environment == 'development' || github.event.inputs.environment == 'all'
    environment: 
      name: development
      # url: ${{ secrets.DEV_DEPLOYMENT_URL }}
    
    env:
      DATABRICKS_HOST: ${{ secrets.DEV_DEPLOYMENT_URL }}
      DATABRICKS_TOKEN: ${{ secrets.DEV_DEVELOPMENT_TOKEN }}
      REPO_PATH: /Workspace/Repos/naman.doshi@datacurate.ai/AOC_DEV_FOLDER
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Set up Databricks CLI
        uses: databricks/setup-cli@main
      
      - name: Extract branch name
        id: extract_branch
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      
      - name: Pre-deployment validation
        run: |
          echo "üîç Pre-deployment checks for DEV..."
          echo "Target repo: ${{ env.REPO_PATH }}"
          echo "Branch: ${{ steps.extract_branch.outputs.branch }}"
          
          # Verify Databricks connection
          databricks repos list --output json | jq '.' || echo "‚ö†Ô∏è Warning: Could not list repos"
      
      - name: Update Databricks Repo (DEV)
        run: |
          echo "üöÄ Deploying to DEV environment..."
          databricks repos update "${{ env.REPO_PATH }}" \
            --branch "${{ steps.extract_branch.outputs.branch }}"
      
      - name: Post-deployment validation
        run: |
          echo "‚úÖ DEV deployment completed successfully"
          echo "Deployment time: $(date)"
      
      - name: Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ DEV Deployment Successful"
          else
            echo "‚ùå DEV Deployment Failed"
          fi

  # ----------------------
  # DEPLOY TO UAT
  # ----------------------
  deploy-uat:
    needs: deploy-dev
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && needs.deploy-dev.result == 'success') || 
      github.event.inputs.environment == 'uat' || 
      github.event.inputs.environment == 'all'
    environment: 
      name: uat
      # url: ${{ secrets.DEV_DEPLOYMENT_URL }}
    
    env:
      DATABRICKS_HOST: ${{ secrets.DEV_DEPLOYMENT_URL }}
      DATABRICKS_TOKEN: ${{ secrets.DEV_DEVELOPMENT_TOKEN }}
      REPO_PATH: /Workspace/Repos/naman.doshi@datacurate.ai/AOC_UAT_FOLDER
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Set up Databricks CLI
        uses: databricks/setup-cli@main
      
      - name: Extract branch name
        id: extract_branch
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      
      - name: Pre-deployment validation
        run: |
          echo "üîç Pre-deployment checks for UAT..."
          echo "Target repo: ${{ env.REPO_PATH }}"
          echo "Branch: ${{ steps.extract_branch.outputs.branch }}"
          echo ""
          echo "‚è≥ Waiting for manual approval from UAT reviewers..."
      
      - name: Update Databricks Repo (UAT)
        run: |
          echo "üöÄ Deploying to UAT environment..."
          databricks repos update "${{ env.REPO_PATH }}" \
            --branch "${{ steps.extract_branch.outputs.branch }}"
      
      - name: Post-deployment validation
        run: |
          echo "‚úÖ UAT deployment completed successfully"
          echo "Deployment time: $(date)"
          echo ""
          echo "üìù Next Steps:"
          echo "  1. Verify UAT deployment"
          echo "  2. Run UAT test suite"
          echo "  3. Get stakeholder sign-off"
          echo "  4. Proceed to PROD deployment after approval"
      
      - name: Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ UAT Deployment Successful"
          else
            echo "‚ùå UAT Deployment Failed"
          fi

  # ----------------------
  # DEPLOY TO PROD
  # ----------------------
  deploy-prod:
    needs: deploy-uat
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && needs.deploy-uat.result == 'success') || 
      github.event.inputs.environment == 'production' || 
      github.event.inputs.environment == 'all'
    environment: 
      name: production
      # url: ${{ secrets.DEV_DEPLOYMENT_URL }}
    
    env:
      DATABRICKS_HOST: ${{ secrets.DEV_DEPLOYMENT_URL }}
      DATABRICKS_TOKEN: ${{ secrets.DEV_DEVELOPMENT_TOKEN }}
      REPO_PATH: /Workspace/Repos/naman.doshi@datacurate.ai/AOC_PROD_FOLDER
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Set up Databricks CLI
        uses: databricks/setup-cli@main
      
      - name: Extract branch name
        id: extract_branch
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      
      - name: Pre-deployment validation
        run: |
          echo "‚ö†Ô∏è  PRODUCTION DEPLOYMENT INITIATED"
          echo "================================================"
          echo "Target repo: ${{ env.REPO_PATH }}"
          echo "Branch: ${{ steps.extract_branch.outputs.branch }}"
          echo "Commit: ${{ github.sha }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Timestamp: $(date)"
          echo "================================================"
          echo ""
          echo "‚è≥ Waiting for manual approval from authorized personnel..."
          echo ""
          echo "Deployment checklist:"
          echo "  ‚òë DEV deployment successful"
          echo "  ‚òë UAT deployment successful"
          echo "  ‚è≥ Waiting for PROD approval"
      
      - name: Create deployment backup point
        run: |
          echo "üíæ Creating backup reference..."
          echo "Previous commit: $(git rev-parse HEAD~1)"
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Backup tag: backup-prod-$(date +%Y%m%d-%H%M%S)"
      
      - name: Update Databricks Repo (PROD)
        run: |
          echo "üöÄ Deploying to PRODUCTION environment..."
          databricks repos update "${{ env.REPO_PATH }}" \
            --branch "${{ steps.extract_branch.outputs.branch }}"
      
      - name: Post-deployment validation
        run: |
          echo "‚úÖ PRODUCTION deployment completed successfully"
          echo "================================================"
          echo "Deployment completed at: $(date)"
          echo "Environment: PRODUCTION"
          echo "Branch: ${{ steps.extract_branch.outputs.branch }}"
          echo "================================================"
          echo ""
          echo "üìù Post-deployment tasks:"
          echo "  1. Monitor application logs"
          echo "  2. Verify critical workflows"
          echo "  3. Check monitoring dashboards"
          echo "  4. Notify stakeholders"
      
      - name: Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ ‚úÖ ‚úÖ PRODUCTION Deployment Successful ‚úÖ ‚úÖ ‚úÖ"
          else
            echo "‚ùå ‚ùå ‚ùå PRODUCTION Deployment Failed ‚ùå ‚ùå ‚ùå"
          fi
      
      - name: Create deployment tag
        if: success()
        run: |
          TAG_NAME="prod-release-$(date +%Y%m%d-%H%M%S)"
          echo "üè∑Ô∏è  Creating deployment tag: $TAG_NAME"
          git tag -a "$TAG_NAME" -m "Production deployment on $(date)"
          echo "Tag created successfully"

  # ----------------------
  # DEPLOYMENT SUMMARY
  # ----------------------
  deployment-summary:
    needs: [deploy-dev, deploy-uat, deploy-prod]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate deployment report
        run: |
          echo "=========================================="
          echo "       DEPLOYMENT SUMMARY REPORT"
          echo "=========================================="
          echo ""
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Trigger: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Actor: ${{ github.actor }}"
          echo ""
          echo "Environment Status:"
          echo "  DEV:  ${{ needs.deploy-dev.result }}"
          echo "  UAT:  ${{ needs.deploy-uat.result }}"
          echo "  PROD: ${{ needs.deploy-prod.result }}"
          echo ""
          echo "Completed at: $(date)"
          echo "=========================================="
